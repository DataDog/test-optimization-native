# Stage 1: Build the static library using musl (Alpine)
FROM golang:1-alpine AS builder

# Install dependencies for the static build with musl and cgo
RUN apk add --no-cache gcc musl-dev build-base

# Allow changing the architecture during the build if needed
ARG GOARCH=amd64

# Configure environment variables for compilation
ENV CGO_ENABLED=1 \
    GOOS=linux \
    GOARCH=$GOARCH \
    # Use gcc with the -static option to force static linking
    CC="gcc -static" \
    CGO_CFLAGS="-O2 -s -DNDEBUG -fdata-sections -ffunction-sections" \
    CGO_LDFLAGS="-static -s -Wl,--gc-sections"

# Set working directory
WORKDIR /app

# Copy all code to the container
COPY . .

# Change to the directory where the code to compile is located
WORKDIR /app/internal/civisibility/native

# Compile the static library using cgo in c-archive mode, forcing static linking,
# removing the -gcflags flag, adding the "netgo" tag, y para arm64 agregar -lresolv.
RUN if [ "$GOARCH" = "arm64" ]; then \
      echo "Compilando para arm64 con linkeo explÃ­cito de libresolv"; \
      go build -tags "civisibility_native netgo" -buildmode=c-archive \
      -ldflags="-extldflags '-static -lresolv' -s -w" \
      -o ./output/static/libtestoptimization.a *.go; \
    else \
      echo "Compilando para amd64"; \
      go build -tags "civisibility_native netgo" -buildmode=c-archive \
      -ldflags="-extldflags '-static' -s -w" \
      -o ./output/static/libtestoptimization.a *.go; \
    fi

# Optimize the binary by removing unnecessary symbols
RUN strip --strip-unneeded ./output/static/libtestoptimization.a

# Stage 2: Package the library
FROM alpine:latest

# Rename the final file using build args
ARG FILE_NAME=libtestoptimization

# Install zip to compress the files
RUN apk add --no-cache zip

# Create the output directory
RUN mkdir -p /output/static

# Copy the library and header from the builder stage
COPY --from=builder /app/internal/civisibility/native/output/static/libtestoptimization.a /output/static/libtestoptimization.a
COPY --from=builder /app/internal/civisibility/native/output/static/libtestoptimization.h /output/static/libtestoptimization.h

# Compress the library and header in a zip archive
RUN cd /output/static && zip -j -9 ../${FILE_NAME}-static.zip *.*

# Create a file with the SHA256 checksum of the zip to verify integrity
RUN sha256sum /output/${FILE_NAME}-static.zip > /output/${FILE_NAME}-static.zip.sha256sum

# Clean up intermediate files
RUN rm -r /output/static

# When the container starts, list the contents and copy the files to a destination directory
ENTRYPOINT ["sh", "-c", "ls /output && cp /output/*.* /libtestoptimization && echo 'Static library copied.'"]
